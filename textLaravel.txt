/* ROUTES */

/* Route::get('/project', 'ProjectController@index')->name('project.index');
Route::get('/project/create', 'ProjectController@create')->name('project.create'); //crear siempre va primero q show
Route::get('/project/{project}/edit', 'ProjectController@edit')->name('project.edit');
Route::patch('/project/{project}', 'ProjectController@update')->name('project.update');
Route::post('/project', 'ProjectController@store')->name('project.store');
Route::get('/project/{project}', 'ProjectController@show')->name('project.show');
Route::delete('/project/{project}', 'ProjectController@destroy')->name('project.destroy');
 */


/*
Route::resource('/portafolio', 'PortafolioController')->only('index', 'show'); para mostrar solo esos dos metodos;
Route::resource('/portafolio', 'PortafolioController')->except('index', 'show'); para no mostrar esos 2 metodos;
Route::apiResource('/portafolio', 'PortafolioController')->name('portafolio');

 */

//name  solo sirve para hacer routes de links = href route ...
// Route::view('/', 'prueba'); para visstas directas con poco uso de metodos; politicas de privacidad articulos etc;


/* BLADE TEMPLATES */

* En Views vamos a ver
    -emails = mensaje q vamos a enviar y se conecta con  = MessageController
    -errors = se puede hacer una carpeta errors/ 404.blade.php
    -layout = pag principal donde se va a poner la estructura
    -partials = nav bar, footer cosas q usaremos con @include
    -project = el projecto como tal indesx, show, edit, create

En views vamos a ver home of the page dashboard o home .blade.php



/* PUBLIC */

Creamos una carpeta llamada images y ahi colocaremos todas las imagenes q queramos poner en el proyecto...


/* MIGRATIONS */

make:migration create_project_table = id, name, description... etc
migrate:fresh = eliminara todos los datos
migrate:ref =  hara rollback y despues migrate
-- help

/* DATABASE */

Pondremos los campos fillable  q usaremos durante el proyecto para campos masivos =

protected $fillable = ['id', 'name', 'description'... etc];


/* HELPERS */

Helpers, son funciones q usaremos continuamente para ayudarnos a hacer el proyecto mas facil de
acuerdo a como avanaza

/* Mail */

- make mail MessageReceived

Mail::to('email@gmail.com')->queue(new modelo($mensaje));


vamos a crear un MessageController y le pasareos una funcion con los campos q demos a requerir

public function store(Request $request)
    {

        $message = request()->validate([
            'name'=>'required',
            'email'=>'required|email',
            'subject'=>'required',
            'comments'=>'required|min:3'],
            [
                'name.required'=>'put the name'
            ]
        );
                //enviar el email

        Mail::to(request('email'))->queue(new MessageReceived($message));

        return 'Mensaje Enviado';
        //redirect(route('Messages', 'Mensaje Enviado'))
    }

--------------------------------------------------------------------------------------

MAil.......

class MessageReceived extends Mailable
{
    use Queueable, SerializesModels;

    public $msg;
    /**
     * Create a new message instance.
     *
     * @return void
     */
    public function __construct($msg)
    {
        $this->msg = $msg;
    }

    /**
     * Build the message.
     *
     * @return $this
     */
    public function build()
    {
        return $this->view('emails.messageReceived');
    }
}

---------------------------------------------------------------------------

    function name( Project $project) =  $project = Project::findOrFail($id);

como hacer un controllador organizadamente


class ProjectController extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        $projects = Project::orderBy('created_at', 'desc')->paginate(10);

        return view('projects.index', compact('projects'));

    }

    public function show($id)
    {
        $project = Project::findOrFail($id);
        return view('projects.show', compact('project'));

    }

    public function create()
    {
        return view('projects.create');
    }

    public function store()
    {
        Project::create(request()->validate(
        [
            'title'=>'required|min:3',
            'description'=>'required|min:3'
        ],
        [
            'title.required'=>'The name field is required',
            'description.required'=>'The description field is required'
        ]
    ));

        return redirect(route('project.index'));
    }

    public function edit($id)
    {
        $project = Project::findOrFail($id);
        return view('projects.edit', compact('project'));
    }

    public function update(Project $project, SaveProyectRequest $request)
    {
        $project->update([
            'title' => request('title'),
            'description' => request('description')
        ]);

        return redirect(route('project.index'));
    }

    public function destroy(Project $project){


        $project->delete();


        return redirect(route('project.index'));

    }

}








se utilizan variables de entorno para poder separar bases de datos en este caso
una basse de dats se utilizaria para entorno local y tra para entorno de produccion
 '
sudo -i -u postgres
password

psql

create or drop database nameDatabase;
\c nameDatabase to connect to the data base
\l lista de databases
\dt display tables
\ds display sequence


migrate:
rollback --step=1
rollback --step=2

fresh ---> para brrar y corregir los datos de la tabla
refresh----> hara un rollback y tambn hara un migrate en las tablas corresondientes
migration = podremos crear migraciones nuevas create_nombre_table ....
rollback


una forma para consultar la base de datos

use DB;

$variableName = DB::table('tableName')->get();
return view('blade', compact('variableName'));
y ahora en la vista llamaremos como objetos en este caso
{!! <li> $variableName->title  </li>  !!}



ORM == object relational mapping

mapear objetos a datos en la base de datos
para hacer una tabla necesitamos traer eliminar u otras
en este caso utilizariamos
search, delete, update, find();

para trabajar con eloquent necesitamos empezar creando un modelo

metodos  = Orderby, get, from, where, select, latest.+





{!! $errors->first('email','<li class="btn btn-danger">:message</li>') !!}

para hacer en este caso una contional usaremos este aptron
si errors me trae email vamos a pasar el mensaje de falta tal cosa en este ejp email
el first se utilizaria si encuentra primero email me traeras email , si no me pasaras el mensaje prescrito con
lo q hace falta

usaremos helpers para crear funciones q se utilizaran todo el tiempo en este caso
una donde tengamos q hacer un redirect to this route =
{
    {{ setActive('home')}}

    -------------------metodo --------------------

    function setActive($routeName)
    {
        return request()->routeIs($routeName) ? 'active' : '';
    }
}



